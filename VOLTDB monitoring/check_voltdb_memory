#!/usr/bin/perl
#################################################################################
# Nagios plug-in for VoltDB
# (c) 2013-2014 VoltDB Inc. All rights reserved.
#################################################################################
#
# This checks the memory usage of a VoltDB node against predetermined limits
#
# VoltDB instance memory used is compared to warning and critical limits.
#
# Limits are evaluated for all hosts in the cluster.
#
# usage:
# check_voltdb_memory -H host [-p port] [-c/-C critical] [-W/-w warning] [-t]
# 	-h : print this message
# 	-H hostname : The hostname of the server running voltdb
# 	-p port : httpd port for voltdb (default:8080)
# 	-U userid
# 	-P password
# 	-W n : warning level percent of memory used (default:75)
# 	-w n : warning level memory used in Mbytes
# 	-C m : critical level percent of memory used (default:85)
# 	-c m : critical level memory used in Mbytes
# 	-z   : display timestamp on output messages (log style)
#
# A note about VoltDB memory usage--
# In a replication (DR) scenario, 128MB/partition may be used by the master to
# buffer replication backlog. Planners should reserve sufficient main memory to
# ensure that physical memory is not exhausted when buffering replication streams,
# particularly if swapping is off. This may cause the database to terminate
# unexpectedly. Refer to the VoltDB documentation memory requirements/guidelines.
#
# We recommend using the percentage monitoring option and the builtin defaults.
#
# Nagios integration:
# define service{
#         use                             generic-service
#         hostgroup_name                  voltdb-servers
#         service_description             voltdb memory
#         check_command                   check-voltdb-memory!75!85
# }
#
# define command{
#     command_name    check-voltdb-memory
#     command_line    $USER1$/check_voltdb_memory -H $HOSTADDRESS$ -W $ARG1$ -C $ARG2$
# }
#

use strict;
use JSON;
use JSON::Path;
use LWP::UserAgent;
use Getopt::Std;
use POSIX qw/strftime/;

my $HOST;
my $HOSTPORT="8080";
my $COMP="MEMORY";
my $DELTA=0;
my $admin="false";

sub usage() {
    print "\nusage:\n";
    print "check_voltdb_memory -H host [-p port] [-c/-C critical] [-W/-w warning] [-t]\n";
    print "\t-h : print this message\n";
    print "\t-H hostname : The hostname of the server running voltdb\n";
    print "\t-p port : httpd port for voltdb (default:8080)\n";
    print "\t-U userid\n";
    print "\t-P password\n";
    print "\t-W n : warning level percent of memory used (default:75)\n";
    print "\t-w n : warning level memory used in Mbytes\n";
    print "\t-C m : critical level percent of memory used (default:85)\n";
    print "\t-c m : critical level memory used in Mbytes\n";
    print "\t-z   : display timestamp on output messages (log style)\n";
    exit 3
}

sub fail_msg {
    print "@_\n";
    exit 3;
}

my %opts=();
getopts ("C:c:hH:P:p:U:W:w:z", \%opts) || usage;

if (defined $opts{h}) {
    print "This plugin checks the memory use of a VoltDB node\n";
    usage;
}

if (!defined $opts{H}) {
    print "Host not specified";
    usage;
}

my $cred = "";
if (defined $opts{U}) {
    $cred = "&User=$opts{U}&Password=$opts{P}";
}

$HOST=$opts{H};
$HOSTPORT=$opts{p} if defined $opts{p};

print strftime('%Y-%m-%d %H:%M:%S ',localtime) if defined $opts{z};

my $ua = LWP::UserAgent->new;
$ua->agent("MyApp/0.1 ");
$ua->timeout(30);
$ENV{'PERL_LWP_SSL_VERIFY_HOSTNAME'} = 0;
$ua->ssl_opts( verify_hostname => 0 ,SSL_verify_mode => 0x00);
my $req = HTTP::Request->new(GET => "http://$HOST:$HOSTPORT/api/1.0/?Procedure=\@Statistics&Parameters=[$COMP,$DELTA]&admin=".$admin.$cred);
my $res = $ua->request($req);

#check https port if http failed
if (!$res->is_success) {
    $HOSTPORT="8443" if !defined $opts{p};
    $req = HTTP::Request->new(GET => "https://$HOST:$HOSTPORT/api/1.0/?Procedure=\@Statistics&Parameters=[$COMP,$DELTA]&admin=".$admin.$cred);
    $res = $ua->request($req);
    if (!$res->is_success) {
    	fail_msg("Failed to connect to VoltDB");
    }	
}
my $stats = decode_json($res->content);

my $jpath;
$jpath = JSON::Path->new('$.statusstring');
my ($status) = $jpath->values($stats);
if ($status) {
    fail_msg("Unexpected status response to statistics call: ".$status);
}

$jpath = JSON::Path->new('$.results[0].schema[*].name');
my @rows = $jpath->values($stats);
if (scalar @rows == 0) {
    fail_msg("No schema received");
}

my ($HN) = grep { $rows[$_] eq 'HOSTNAME' } 0..$#rows or fail_msg("internal error column HOSTNAME not found");
my ($RSS) = grep { $rows[$_] eq 'RSS' } 0..$#rows or fail_msg("internal error column RSS not found");
my ($PHYS) = grep { $rows[$_] eq 'PHYSICALMEMORY' } 0..$#rows or fail_msg("internal error column PHYSICALMEMORY not found");

$jpath = JSON::Path->new('$.results[0].data.*');
my @rows = $jpath->values($stats);
if (scalar @rows == 0) {
    fail_msg("No data received");
}

my $WARN_LIMIT = shift;
my $CRIT_LIMIT = shift;

my $msg = $res->content;
my $pctused;
my $rss;
my $phys;

foreach (@rows) {
    $rss += @$_[$RSS];
    $phys += @$_[$PHYS];
}

$pctused = sprintf "%.2f", $rss / $phys * 100.;
$rss = sprintf "%.4f", $rss / 1024.;

if (defined $opts{c} && $rss > $opts{c} ||
    defined $opts{C} && $pctused > $opts{C}) {
        print "VoltDB Memory CRITICAL - ${rss} Mbytes (${pctused}%) used.\n";
        exit 2;
}

if (defined $opts{w} && $rss > $opts{w} ||
    defined $opts{W} && $pctused > $opts{W}) {
        print "VoltDB Memory WARNING - ${rss} Mbytes (${pctused}%) used.\n";
        exit 1;
}

print "VoltDB Memory OK - ${rss} Mbytes (${pctused}%) used cluster wide - ".scalar @rows." host(s) reporting checked.\n";
exit 0;
